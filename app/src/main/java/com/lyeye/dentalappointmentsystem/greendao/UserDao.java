package com.lyeye.dentalappointmentsystem.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lyeye.dentalappointmentsystem.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserAge = new Property(2, Long.class, "userAge", false, "USER_AGE");
        public final static Property UserGender = new Property(3, String.class, "userGender", false, "USER_GENDER");
        public final static Property UserPwd = new Property(4, String.class, "userPwd", false, "USER_PASSWORD");
        public final static Property UserEmail = new Property(5, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property UserPhoneNumber = new Property(6, String.class, "userPhoneNumber", false, "USER_PHONE_NUMBER");
        public final static Property AffiliatedHospital = new Property(7, String.class, "affiliatedHospital", false, "AFFLILIATED_HOSPITAL");
        public final static Property UserBirthday = new Property(8, java.util.Date.class, "userBirthday", false, "USER_BIRTHDAY");
        public final static Property DiagnosisNumber = new Property(9, String.class, "diagnosisNumber", false, "DIAGNOSIS_NUMBER");
        public final static Property HeadPortrait = new Property(10, String.class, "headPortrait", false, "HEAD_PORTRAIT");
        public final static Property CreateAt = new Property(11, java.util.Date.class, "createAt", false, "CREATE_AT");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"USER_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userId
                "\"USER_NAME\" TEXT NOT NULL ," + // 1: userName
                "\"USER_AGE\" INTEGER," + // 2: userAge
                "\"USER_GENDER\" TEXT," + // 3: userGender
                "\"USER_PASSWORD\" TEXT," + // 4: userPwd
                "\"USER_EMAIL\" TEXT," + // 5: userEmail
                "\"USER_PHONE_NUMBER\" TEXT," + // 6: userPhoneNumber
                "\"AFFLILIATED_HOSPITAL\" TEXT," + // 7: affiliatedHospital
                "\"USER_BIRTHDAY\" INTEGER," + // 8: userBirthday
                "\"DIAGNOSIS_NUMBER\" TEXT," + // 9: diagnosisNumber
                "\"HEAD_PORTRAIT\" TEXT," + // 10: headPortrait
                "\"CREATE_AT\" INTEGER);"); // 11: createAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
        stmt.bindString(2, entity.getUserName());
 
        Long userAge = entity.getUserAge();
        if (userAge != null) {
            stmt.bindLong(3, userAge);
        }
 
        String userGender = entity.getUserGender();
        if (userGender != null) {
            stmt.bindString(4, userGender);
        }
 
        String userPwd = entity.getUserPwd();
        if (userPwd != null) {
            stmt.bindString(5, userPwd);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(6, userEmail);
        }
 
        String userPhoneNumber = entity.getUserPhoneNumber();
        if (userPhoneNumber != null) {
            stmt.bindString(7, userPhoneNumber);
        }
 
        String affiliatedHospital = entity.getAffiliatedHospital();
        if (affiliatedHospital != null) {
            stmt.bindString(8, affiliatedHospital);
        }

        java.util.Date userBirthday = entity.getUserBirthday();
        if (userBirthday != null) {
            stmt.bindLong(9, userBirthday.getTime());
        }

        String diagnosisNumber = entity.getDiagnosisNumber();
        if (diagnosisNumber != null) {
            stmt.bindString(10, diagnosisNumber);
        }

        String headPortrait = entity.getHeadPortrait();
        if (headPortrait != null) {
            stmt.bindString(11, headPortrait);
        }

        java.util.Date createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindLong(12, createAt.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
        stmt.bindString(2, entity.getUserName());
 
        Long userAge = entity.getUserAge();
        if (userAge != null) {
            stmt.bindLong(3, userAge);
        }
 
        String userGender = entity.getUserGender();
        if (userGender != null) {
            stmt.bindString(4, userGender);
        }
 
        String userPwd = entity.getUserPwd();
        if (userPwd != null) {
            stmt.bindString(5, userPwd);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(6, userEmail);
        }
 
        String userPhoneNumber = entity.getUserPhoneNumber();
        if (userPhoneNumber != null) {
            stmt.bindString(7, userPhoneNumber);
        }
 
        String affiliatedHospital = entity.getAffiliatedHospital();
        if (affiliatedHospital != null) {
            stmt.bindString(8, affiliatedHospital);
        }

        java.util.Date userBirthday = entity.getUserBirthday();
        if (userBirthday != null) {
            stmt.bindLong(9, userBirthday.getTime());
        }

        String diagnosisNumber = entity.getDiagnosisNumber();
        if (diagnosisNumber != null) {
            stmt.bindString(10, diagnosisNumber);
        }

        String headPortrait = entity.getHeadPortrait();
        if (headPortrait != null) {
            stmt.bindString(11, headPortrait);
        }

        java.util.Date createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindLong(12, createAt.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
                cursor.getString(offset + 1), // userName
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userAge
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userGender
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userPwd
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userEmail
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userPhoneNumber
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // affiliatedHospital
                cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // userBirthday
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // diagnosisNumber
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // headPortrait
                cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)) // createAt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.getString(offset + 1));
        entity.setUserAge(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUserGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserPwd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserPhoneNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAffiliatedHospital(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserBirthday(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setDiagnosisNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHeadPortrait(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateAt(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
    }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
